<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
        <property name="messageConverters">
            <list>
                <bean id="mappingJackson2HttpMessageConverter"
                      class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/html;charset=UTF-8</value>
                            <value>text/json;charset=UTF-8</value>
                        </list>
                    </property>
                    <property name="objectMapper" ref="MyObjectMapper" />

                </bean>
                <bean class = "org.springframework.http.converter.StringHttpMessageConverter">
                    <property name = "supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>



            </list>
        </property>
    </bean>

    <bean id="MyObjectMapper" class="main.util.MyObjectMapper"></bean>

    <!--指明 controller 所在包，并扫描其中的注解-->
    <context:component-scan base-package="main"/>
    <!-- 静态资源(js、image等)的访问 -->
    <mvc:default-servlet-handler/>

    <!-- 开启注解 -->
    <mvc:annotation-driven/>

    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--<bean id="HostelService" class="nju.edu.hostel.service.bean.HostelServiceBean"></bean>-->
    <!--<bean id="ManagerService" class="nju.edu.hostel.service.bean.ManagerServiceBean"></bean>-->
    <!--<bean id="UserService" class="nju.edu.hostel.service.bean.UserServiceBean"></bean>-->
    <!--<bean id="VIPService" class="nju.edu.hostel.service.bean.VIPServiceBean"></bean>-->
    <!-- Hibernate Session Factory -->
    <!-- 数据库映射 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/XiaoMai?autoReconnect=true&amp;useSSL=false" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>main.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!--<prop key="hibernate.show_sql">true</prop>-->
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/XiaoMai?autoReconnect=true&amp;useSSL=false</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop>
                <!--  <prop key="hibernate.current_session_context_class">thread</prop> -->
            </props>
        </property>
    </bean>
    <!-- 链接到persistence.xml -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="defaultPersistenceUnit"/>
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 开启事务管理注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!--quartz-->

    <!-- 加入需要执行的类(定时查出超过15分钟未支付的订单) -->
    <bean id="timingSchedule" class="main.util.TimeAction"/>
    <!-- 加入定时执行的方法 -->
    <bean id="timingScheduleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 定时执行的类 -->
        <property name="targetObject" ref="timingSchedule"/>
        <!-- 具体的方法 -->
        <property name="targetMethod" value="checkInvalidOrder"/>
    </bean>
    <!-- 调度触发器，设置自己想要的时间规则 -->
    <bean id="timingScheduleTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!-- 加入相关的执行类和方法 -->
        <property name="jobDetail" ref="timingScheduleJobDetail"/>
        <!-- 设置时间规则 （为了方便测试，设置成一分钟一次。具体的规则见详情）-->
        <property name="cronExpression" value="00 * * * * ?"/>
    </bean>

    <!-- 加入需要执行的类(定时更新演出的状态) -->
    <bean id="timingToCheckPerform" class="main.util.TimeAction2"/>
    <!-- 加入定时执行的方法 -->
    <bean id="checkPerformJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 定时执行的类 -->
        <property name="targetObject" ref="timingToCheckPerform"/>
        <!-- 具体的方法 -->
        <property name="targetMethod" value="checkPerformState"/>
    </bean>
    <!-- 调度触发器，设置自己想要的时间规则 -->
    <bean id="checkPerformScheduleTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!-- 加入相关的执行类和方法 -->
        <property name="jobDetail" ref="checkPerformJobDetail"/>
        <!-- 设置时间规则 （为了方便测试，设置成一分钟一次。具体的规则见详情）-->
        <property name="cronExpression" value="00 01 00 * * ?"/>
    </bean>


    <!-- 加入调度工厂 ,设置调度触发器即可-->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="timingScheduleTrigger"/>
                <ref bean="checkPerformScheduleTrigger"/>
            </list>
        </property>
    </bean>


</beans>
